<?php
require_once "../vendor/autoload.php";
use Aws\S3\S3Client;
use Aws\Exception\AwsException;

// Set up Twig loader system
$loader = new Twig_Loader_Filesystem('../views');
$twig   = new Twig_Environment($loader, array());
$ini_array = parse_ini_file("../conf/phpconfig.ini", true);

// Get contents from database '.$ini_array["ip"].'

// Vuln_applications
$json = file_get_contents('http://'.$ini_array["ip"].'/api/v2/mongodb/_table/vuln_applications?limit=4&order=_id%20DESC&api_key='.$ini_array["api_key"]);
$obj = json_decode($json, true);
$data['vuln_applications'] = [];
foreach ($obj['resource'] as $key => $v) {
	$data['vuln_applications'][$key]["_id"] = $v['_id'];
	$data['vuln_applications'][$key]["application_name"] = $v['application_name'];
	if(isset($v['exploitdb_id'])) {
		$data['vuln_applications'][$key]["exploitdb_id"] = $v['exploitdb_id'];
	}
	if(isset($v['type'])) {
		$data['vuln_applications'][$key]["type"] = $v['type'];
	}
	if(isset($v['platform'])) {
		$data['vuln_applications'][$key]["platform"] = $v['platform'];
	}
	if(isset($v['published_date'])) {
		$data['vuln_applications'][$key]["published_date"] = $v['published_date'];
	}
	if(isset($v['added_date'])) {
		$data['vuln_applications'][$key]["added_date"] = $v['added_date'];
	}
	$data['vuln_applications'][$key]["cve"] = $v['cve'];
	if(isset($v['cve_summary'])) {
		$data['vuln_applications'][$key]["cve_summary"] = $v['cve_summary'];
	}
	if(isset($v['cwe'])) {
		$data['vuln_applications'][$key]["cwe"] = $v['cwe'];
	}
	if(isset($v['impact'])) {
		$data['vuln_applications'][$key]["impact"] = $v['impact'];
	}
	if(isset($v['vulnerable_configuration'])) {
		$data['vuln_applications'][$key]["vulnerable_configuration"] = $v['vulnerable_configuration'];
	}
	if(isset($v['file_path'])) {
		$data['vuln_applications'][$key]["file_path"] = $v['file_path'];
	}
	if(isset($v['summary'])) {
		$data['vuln_applications'][$key]["summary"] = $v['summary'];
	}
	if(isset($v['tag'])) {
		$data['vuln_applications'][$key]["tag"] = $v['tag'];
	}
}

// ctf_challenges
$json = file_get_contents('http://'.$ini_array["ip"].'/api/v2/mongodb/_table/ctf_challenges?limit=4&order=_id%20DESC&api_key='.$ini_array["api_key"]);
$obj = json_decode($json, true);
$data['ctf_challenges'] = [];
foreach ($obj['resource'] as $key => $v) {
	$data['ctf_challenges'][$key]["_id"] = $v['_id'];
	$data['ctf_challenges'][$key]["name"] = $v['name'];
	if(isset($v['summary'])) {
		$data['ctf_challenges'][$key]["summary"] = $v['summary'];
	}
	if(isset($v['author'])) {
		$data['ctf_challenges'][$key]["author"] = $v['author'];
	}
	if(isset($v['creation_date'])) {
		$data['ctf_challenges'][$key]["creation_date"] = $v['creation_date'];
	}
	if(isset($v['port'])) {
		$data['ctf_challenges'][$key]['port'] = $v['port'];
	}
	if(isset($v['type'])){
		$data['ctf_challenges'][$key]['type'] = $v['type'];
	}
	if(isset($v['category'])) {
		$data['ctf_challenges'][$key]['category'] = $v['category'];
	}
	if(isset($v['difficulty'])) {
		$data['ctf_challenges'][$key]['difficulty'] = $v['difficulty'];
	}
	if(isset($v['added_date'])) {
		$data['ctf_challenges'][$key]['added_date'] = $v['added_date'];
	}
	if(isset($v['points'])) {
		$data['ctf_challenges'][$key]['points'] = $v['points'];
	}
	if (isset($v['walkthrough'])) {
		$data['ctf_challenges'][$key]['walkthrough'] = $v['walkthrough'];
	}
	if(isset($v['flag'])) {
		$data['ctf_challenges'][$key]['flag'] = $v['flag'];
	}
}

// Malware
$json = file_get_contents('http://'.$ini_array["ip"].'/api/v2/mongodb/_table/malware?limit=4&order=_id%20DESC&api_key='.$ini_array["api_key"]);
$obj = json_decode($json, true);
$data['malware'] = [];
foreach ($obj['resource'] as $key => $v) {
	$data['malware'][$key]["_id"] = $v["_id"];
	$data['malware'][$key]["name"] = $v["name"];
	if(isset($v['summary'])) {
		$data['malware'][$key]["summary"] = $v['summary'];
	}
	if(isset($v['platform'])) {
		$data['malware'][$key]["platform"] = $v['platform'];
	}
	if(isset($v['type'])) {
		$data['malware'][$key]["type"] = $v['type'];
	}
	if(isset($v['added_date'])) {
		$data['malware'][$key]["added_date"] = $v['added_date'];
	}
}

/**
*
*	Check if variables that needs to be set is set
*	Return error message and mark fields if not
*
**/
if (empty($_POST['malware_name']) || empty($_FILES['malware_fileToUpload']['tmp_name'])) {
	$data['err_malware_msg'] = "Some fields needs to be filled";
	if(empty($_POST['malware_name'])) {
		$data['err_malware_name'] = "errborder";
	} else {
		$data['malware_name'] = $_POST['malware_name'];
	}

	if (empty($_FILES['malware_fileToUpload']['tmp_name'])) {
		$data['err_malware_file'] = "errborder";
	}

	if (!empty($_POST['malware_summary'])) {
		$data['malware_summary'] = $_POST['malware_summary'];
	}

	$data['malware_platform'] = $_POST['malware_platform'];
	$data['malware_type'] = $_POST['malware_type'];

    echo $twig->render('databaseManagementPage.html', $data); // Render html
}

/**
*
*   If everyhing that needs to be set is set, we can now
*   insert the challenge into swift and mongodb
*
**/
else {
	/** Get Open Stack config **/
    $s3 = include 'openstack/openstack.php';

    /**
    *
    *   File upload to swift container.
    *   Hashed through md5 the filename and a timestamp becomes the id of the mongod document.
    *   to see in swift: swift list TestContainer in cmd
    *
    **/
    $files = [];
    //$content = file_get_contents($_FILES['malware_fileToUpload']['tmp_name']);
    //$filename = hash('md5', $_FILES['malware_fileToUpload']['name'].date_timestamp_get(date_create()));
    $filename = uniqid().'_'.$_FILES['malware_fileToUpload']['name'];
	array_push($files, $filename);

    try{
        $r = $s3->putObject([
            'Bucket' => 'pled_files/malware',
            'Key' => $filename,
            'Body' => $content
        ]);

        $json = '{}';
        $resurce = json_decode($json);
        $resurce->resource = [];
        $malware_to_add = json_decode($json);
        $malware_to_add->name = $_POST['malware_name'];
        if (!empty($_POST['malware_summary'])) {
            $malware_to_add->summary = $_POST['malware_summary'];
        }
        if ($_POST['malware_platform'] != "---") {
        	$malware_to_add->platform = $_POST['malware_platform'];
        }
        if ($_POST['malware_type'] != "---") {
        	$malware_to_add->type = $_POST['malware_type'];
        }
        $malware_to_add->file_path = $filename;

        $resource->resource[0] = $malware_to_add;

        $body = json_encode($resource, true);
        $dfapikey = 'X-DreamFactory-API-Key:'.$ini_array["api_key"];


        $ch = curl_init();
        $options = array(CURLOPT_URL => 'http://'.$ini_array["ip"].'/api/v2/mongodb/_table/malware/',
                         CURLOPT_HTTPHEADER => array($dfapikey,
                                                    'Content-Type: application/json'),
                         CURLOPT_POST => 1,
                         CURLOPT_POSTFIELDS => $body,
                         CURLOPT_RETURNTRANSFER => 1
                        );

        curl_setopt_array($ch, $options);

        // Send the request
        $response = curl_exec($ch);
        
        // Check for errors
        if($response === FALSE){
            die(curl_error($ch));
            $data['error'] = 'dferror';
            echo $twig->render('databaseManagementPage.html', $data); // Render html
        }

        // TODO Find do error handling on response code.
        if ($response == '{"error":{"code":404,"context":null,"message":"Table "malware" does not exist in the database.","status_code":404}}') {
            $data['uploaded'] = 'false';
        } else {
            $data['uploaded'] = 'true';
        }
        header('Location: ../index.php?uploaded=' . $data['uploaded']);
    } catch (S3Exception $e) {
        echo $e->getMessage() . PHP_EOL;
        $data['error'] = 's3Exeption';
        echo $twig->render('databaseManagementPage.html', $data); // Render html
    }
}