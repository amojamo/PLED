<?php
require_once "../vendor/autoload.php";
require_once "../src/classes/Api.php";
use Aws\S3\S3Client;
use Aws\Exception\AwsException;

// Set up Twig loader system
$loader = new Twig_Loader_Filesystem('../views');
$twig   = new Twig_Environment($loader, array());
$ini_array = parse_ini_file("../conf/phpconfig.ini", true);

//Get data on collections
$api = new Api($ini_array);
$collections = explode(',', $ini_array['collections']);
foreach($collections as $collection){
	$data[$collection] = $api->getContents($collection);
}

/**
*
*	Check if variables that needs to be set is set
*	Return error message and mark fields if not
*
**/
if (empty($_POST['malware_name']) || empty($_FILES['malware_fileToUpload']['tmp_name'])) {
	$data['err_malware_msg'] = "Some fields needs to be filled";
	if(empty($_POST['malware_name'])) {
		$data['err_malware_name'] = "errborder";
	} else {
		$data['malware_name'] = $_POST['malware_name'];
	}

	if (empty($_FILES['malware_fileToUpload']['tmp_name'])) {
		$data['err_malware_file'] = "errborder";
	}

	if (!empty($_POST['malware_summary'])) {
		$data['malware_summary'] = $_POST['malware_summary'];
	}

	$data['malware_platform'] = $_POST['malware_platform'];
	$data['malware_type'] = $_POST['malware_type'];

    echo $twig->render('databaseManagementPage.html', $data); // Render html
}

/**
*
*   If everyhing that needs to be set is set, we can now
*   insert the challenge into swift and mongodb
*
**/
else {
	/** Get Open Stack config **/
    $s3 = include 'openstack/openstack.php';

    /**
    *
    *   File upload to swift container.
    *   Hashed through md5 the filename and a timestamp becomes the id of the mongod document.
    *   to see in swift: swift list TestContainer in cmd
    *
    **/
    $files = [];
    //$content = file_get_contents($_FILES['malware_fileToUpload']['tmp_name']);
    //$filename = hash('md5', $_FILES['malware_fileToUpload']['name'].date_timestamp_get(date_create()));
    $filename = uniqid().'_'.$_FILES['malware_fileToUpload']['name'];
	array_push($files, $filename);

    try{
        $r = $s3->putObject([
            'Bucket' => 'pled_files/malware',
            'Key' => $filename,
            'Body' => $content
        ]);

        $json = '{}';
        $resurce = json_decode($json);
        $resurce->resource = [];
        $malware_to_add = json_decode($json);
        $malware_to_add->name = $_POST['malware_name'];
        if (!empty($_POST['malware_summary'])) {
            $malware_to_add->summary = $_POST['malware_summary'];
        }
        if ($_POST['malware_platform'] != "---") {
        	$malware_to_add->platform = $_POST['malware_platform'];
        }
        if ($_POST['malware_type'] != "---") {
        	$malware_to_add->type = $_POST['malware_type'];
        }
        $malware_to_add->file_path = $filename;

        $resource->resource[0] = $malware_to_add;

        $body = json_encode($resource, true);

        $api = new Api($ini_array);
        $body = json_encode($resource, true);
        $res = $api->insert($body, 'malware');
        
        //Check for errors
        if($res['response'] === FALSE){
            die($res['error']);
            $data['error'] = 'dferror';
            echo $twig->render('databaseManagementPage.html', $data); // Render html
        }

        // TODO Find do error handling on response code.
        if ($response == '{"error":{"code":404,"context":null,"message":"Table "malware" does not exist in the database.","status_code":404}}') {
            $data['uploaded'] = 'false';
        } else {
            $data['uploaded'] = 'true';
        }
        header('Location: ../index.php?uploaded=' . $data['uploaded']);
    } catch (S3Exception $e) {
        echo $e->getMessage() . PHP_EOL;
        $data['error'] = 's3Exeption';
        echo $twig->render('databaseManagementPage.html', $data); // Render html
    }
}