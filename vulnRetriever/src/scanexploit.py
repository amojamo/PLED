from lxml import html
import requests
import time
import datetime
import re
import configparser
from ares import CVESearch
from src.config import get_config

#Param: exploitdb-id
#Return: json object
def scanExploit(exploit):
	HEADER = {'user-agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'}    
	CONFIG = get_config('SCANNER')
	cveData = ''
	id = exploit[0]
	#empty json data
	vulnData = {}
	#the url we want to check
	url = CONFIG['exploiturl'] + id
	#Request the page with the selected headers
	page = requests.get(url, headers=HEADER)
	time.sleep(0.1)
	tree = html.fromstring(page.content)
	#What to look for on the page, that says if it has app or not
	#Look in html anchor for href with /apps/ in it
	#Example: <a href="/apps/786c8d62bf18c6c88d2d82a9443cd1e1-httpd-2.0.44.tar.gz">                                    
	hasapp = tree.xpath("//a[re:match(@href, '/apps/')]", 
			namespaces={"re": "http://exslt.org/regular-expressions"})
	#Checks if the exploit is verified, using the checkmark class 
	isverified = tree.xpath("//i[contains(@class, 'mdi-check')]")
	if hasapp and isverified:
		vulnData['application_name'] = exploit[2]
		vulnData['exploitdb_id'] = id
		vulnData['type'] = exploit[5]
		vulnData['platform'] = exploit[6]
		vulnData['published_date'] = exploit[3]
		vulnData['added_date'] = datetime.datetime.fromtimestamp(time.time()).strftime('%Y-%m-%d')
		if (exploit[7]): vulnData['port'] = exploit[7]
		#if the page has an app, scan all the anchors
		#anchors are normally where hrefs are located
		#Since both the app and the cve is found in href this is what we need
		links = tree.xpath('//a')
		for link in links:
			#Store the app url
			#here it is also possible to download the url directly and store elsewhere
			if '/apps/' in link.attrib['href']:
				vulnData['file_path'] = 'https://www.exploit-db.com' + link.attrib['href'].strip()
			if 'CVE' in link.attrib['href']:
				#CVE is link and text content is the CVE id
				#Example: 2014-6271
				vulnData['cve'] = 'CVE-' + link.text_content().strip()
				#using https://github.com/barnumbirr/ares
				#to get cve data
				#load in CVESearch object
				cve_search = CVESearch()
				cveData = cve_search.id(vulnData['cve'])
				#Sometimes the CVE has no data, so check for that
				if cveData:
					if 'summary' in cveData: vulnData['cve_summary'] = cveData.get('summary')
					if 'cvss' in cveData: vulnData['cvss'] = cveData.get('cvss')
					if 'cwe' in cveData: vulnData['cwe'] = cveData.get('cwe')
					if 'impact' in cveData: 
						vulnData['impact'] = cveData.get('impact')
					if 'msbulletin' in cveData:
						vulnData['msbulletin'] = cveData.get('msbulletin')
					if 'vulnerable_configuration_cpe_2_2' in cveData:
						vulnData['vulnerable_configuration'] = cveData.get('vulnerable_configuration_cpe_2_2')		
		if cveData:
			return vulnData
	else:
		return False